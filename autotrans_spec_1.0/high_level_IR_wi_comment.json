// ------------------------------------------------------------------------------------------
// layer0
	// calculate Q0, K0, V0
	Q0 = X0(pre-store) * WQ0(pre-store) + BQ0(pre-store)
	// split Q0
	Q0_0-11 = split(Q0)
	K0 = X0(pre-store) * WK0(pre-store) + BK0(pre-store)
	// transpose K
	KT0 = transpose(K0)
	// split KT0
	KT0_0-11 = split(KT0)
	V0= X0(pre-store) * WV0(pre-store) + BV0(pre-store)
	// split V0
	V0_0-11 = split(V0)
	

	// 12 AP(attention possibility) = Q * KT (single-head)
	// 12 softmax (single-head)
	AP0_0 = Q0_0 * KT0_0
	SOFTMAX0_0 = softmax(AP0_0)
	AP0_1 = Q0_1 * KT0_1
	SOFTMAX0_1 = softmax(AP0_1)
	AP0_2 = Q0_2 * KT0_3
	SOFTMAX0_2 = softmax(AP0_2)
	AP0_3 = Q0_3 * KT0_3
	SOFTMAX0_3 = softmax(AP0_3)
	AP0_4 = Q0_4 * KT0_4
	SOFTMAX0_4 = softmax(AP0_4)
	AP0_5 = Q0_5 * KT0_5
	SOFTMAX0_5 = softmax(AP0_5)
	AP0_6 = Q0_6 * KT0_6
	SOFTMAX0_6 = softmax(AP0_6)
	AP0_7 = Q0_7 * KT0_7
	SOFTMAX0_7 = softmax(AP0_7)
	AP0_8 = Q0_8 * KT0_8
	SOFTMAX0_8 = softmax(AP0_8)
	AP0_9 = Q0_9 * KT0_9
	SOFTMAX0_9 = softmax(AP0_9)
	AP0_10 = Q0_10 * KT0_10
	SOFTMAX0_10 = softmax(AP0_10)
	AP0_11 = Q0_11 * KT0_11
	SOFTMAX0_11 = softmax(AP0_11)

	// 12 AH(attention head) = softmax * V (single-head)
	AH0_0 = SOFTMAX0_0 * V0_0
	AH0_1 = SOFTMAX0_1 * V0_1
	AH0_2 = SOFTMAX0_2 * V0_2
	AH0_3 = SOFTMAX0_3 * V0_3
	AH0_4 = SOFTMAX0_4 * V0_4
	AH0_5 = SOFTMAX0_5 * V0_5
	AH0_6 = SOFTMAX0_6 * V0_6
	AH0_7 = SOFTMAX0_7 * V0_7
	AH0_8 = SOFTMAX0_8 * V0_8
	AH0_9 = SOFTMAX0_9 * V0_9
	AH0_10 = SOFTMAX0_10 * V0_10
	AH0_11 = SOFTMAX0_11 * V0_11

	// merge AH1
	AH0 = merge(AH0_0-11)
	
	// AO(attention output) = 77 * WO
	AO0 = AH0 * WO(pre-store) + BO0(pre-store)

	// MADD_AO = X + AO
	MADD0_AO = MADD (X0(pre-store), AO0)
	
	// LayerNorm_AO = layernorm (MADD_AO)
	LayerNorm0_AO = layernorm (MADD0_AO)

	// FFN_1 = LayerNorm_AO * WFFN_1
	FFN0_1 = LayerNorm0_AO * WFFN0_1(pre-store) + BFFN0_1(pre-store)

	// GELU = gelu(FFN_1)
	GELU0 = gelu(FFN0_1)

	// FFN_2 = GELU * WFFN_2
	FFN0_2 = GELU0 * WFFN0_2(pre-store) + BFFN0_2(pre-store)	

	// MADD_FFN = LayerNorm0_AO + FFN_2
	MADD0_FFN = MADD (LayerNorm0_AO, FFN0_2)
	
	// LayerNorm_FFN = layernorm (MADD_FFN)
	X1 = layernorm (MADD0_FFN)
	
	
// layer1, similar as layer0
// layer 2,3,4, ..., 10, 11 	






// ------------------------------------------------------------------------------------------
[
    // layer0
	// calculate Q0, K0, V0
    // Q0 = X0(pre-store) * WQ0(pre-store) + BQ0(pre-store)
    {
        "optype": "MM", 
        "is_start": 1, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [-1, -1, -1],  
        "input_size": [[128, 768], [768, 768], [1, 768]],  
        "output_num": 1, 
        "output_index": [0],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // split Q0,  Q0_0-11 = split(Q0)
    {
        "optype": "split", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [0],  
        "input_size": [[128, 768]],  
        "output_num": 12, 
        "output_index": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  
        "output_size": [[128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64]], 
        "data_format": ["int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]
    },
    // K0 = X0(pre-store) * WK0(pre-store) + BK0(pre-store)
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [-1, -1, -1],  
        "input_size": [[128, 768], [768, 768], [1, 768]],  
        "output_num": 1, 
        "output_index": [13],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // transpose K,  KT0 = transpose(K0)
    {
        "optype": "transpose", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [13],  
        "input_size": [[128, 768]],  
        "output_num": 1, 
        "output_index": [14],  
        "output_size": [[768, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // split KT0,  KT0_0-11 = split(KT0)
    {
        "optype": "split", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [14],  
        "input_size": [[768, 128]],  
        "output_num": 12, 
        "output_index": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],  
        "output_size": [[64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128], [64, 128]], 
        "data_format": ["int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]
    },
    // V0= X0(pre-store) * WV0(pre-store) + BV0(pre-store)
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [-1, -1, -1],  
        "input_size": [[128, 768], [768, 768], [1, 768]],  
        "output_num": 1, 
        "output_index": [27],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // split V0,  V0_0-11 = split(V0)
    {
        "optype": "split", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [27],  
        "input_size": [[128, 768]],  
        "output_num": 12, 
        "output_index": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],  
        "output_size": [[128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64]], 
        "data_format": ["int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]
    },
    // 12 AP(attention possibility) = Q * KT (single-head)
    // 12 softmax (single-head)
    // head 0
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [1, 15],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [40],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [40],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [41],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 1
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [2, 16],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [42],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [42],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [43],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 2
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [3, 17],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [44],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [44],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [45],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 3
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [4, 18],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [46],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [46],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [47],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 4
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [5, 19],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [48],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [48],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [49],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 5
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [6, 20],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [50],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [50],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [51],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 6
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [7, 21],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [52],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [52],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [53],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 7
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [8, 22],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [54],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [54],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [55],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 8
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [9, 23],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [56],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [56],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [57],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 9
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [10, 24],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [58],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [58],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [59],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 10
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [11, 25],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [60],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [60],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [61],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 11
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [12, 26],  
        "input_size": [[128, 64], [64, 128]],  
        "output_num": 1, 
        "output_index": [62],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    {
        "optype": "softmax", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [62],  
        "input_size": [[128, 128]],  
        "output_num": 1, 
        "output_index": [63],  
        "output_size": [[128, 128]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // 12 AH(attention head) = softmax * V (single-head)
    // head 0
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [41, 28],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [64],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 1
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [43, 29],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [65],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 2
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [45, 30],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [66],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 3
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [47, 31],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [67],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 4
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [49, 32],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [68],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 5
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [51, 33],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [69],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 6
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [53, 34],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [70],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 7
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [55, 35],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [71],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 8
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [57, 36],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [72],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 9
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [59, 37],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [73],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 10
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [61, 38],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [74],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // head 11
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [63, 39],  
        "input_size": [[128, 128], [128, 64]],  
        "output_num": 1, 
        "output_index": [75],  
        "output_size": [[128, 64]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // merge AH_0-11,  AH0 = merge(AH0_0-11)
    {
        "optype": "merge", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 12, 
        "input_index": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],  
        "input_size": [[128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64], [128, 64]],  
        "output_num": 1, 
        "output_index": [76],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]] 
    },
    // AO(attention output) = MERGE * WO,  AO0 = AH0 * WO(pre-store) + BO0(pre-store)
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [76, -1, -1],  
        "input_size": [[128, 768], [768, 768], [1, 768]],  
        "output_num": 1, 
        "output_index": [77],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // MADD_AO = X(pre-store) + AO
    {
        "optype": "MADD", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [-1, 77],  
        "input_size": [[128, 768], [128, 768]],  
        "output_num": 1, 
        "output_index": [78],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // LayerNorm_AO = layernorm (MADD_AO), input: MADD_AO, layernorm_w, layernorm_b
    {
        "optype": "layernorm", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [78, -1, -1],  
        "input_size": [[128, 768], [1], [1]],  
        "output_num": 1, 
        "output_index": [79],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // FFN_1 = LayerNorm_AO * WFFN_1,  FFN0_1 = LayerNorm0_AO * WFFN0_1(pre-store) + BFFN0_1(pre-store)
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [79, -1, -1],  
        "input_size": [[128, 768], [768, 3072], [1, 3072]],  
        "output_num": 1, 
        "output_index": [80],  
        "output_size": [[128, 3072]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // GELU0 = gelu(FFN0_1)
    {
        "optype": "gelu", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 1, 
        "input_index": [80],  
        "input_size": [[128, 3072]],  
        "output_num": 1, 
        "output_index": [81],  
        "output_size": [[128, 3072]], 
        "data_format": ["int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // FFN_2 = GELU * WFFN_2,  FFN0_2 = GELU0 * WFFN0_2(pre-store) + BFFN0_2(pre-store)
    {
        "optype": "MM", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [81, -1, -1],  
        "input_size": [[128, 3072], [3072, 768], [1, 768]],  
        "output_num": 1, 
        "output_index": [82],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int16", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // MADD_FFN = LayerNorm0_AO + FFN_2,  MADD0_FFN = MADD (LayerNorm0_AO, FFN0_2)
    {
        "optype": "MADD", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 2, 
        "input_index": [79, 82],  
        "input_size": [[128, 768], [128, 768]],  
        "output_num": 1, 
        "output_index": [83],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    },
    // LayerNorm_FFN = layernorm (MADD_FFN),  X1 = layernorm (MADD0_FFN), input: MADD0_FFN, layernorm_w, layernorm_b
    {
        "optype": "layernorm", 
        "is_start": 0, 
        "is_final": 0, 
        "input_num": 3, 
        "input_index": [83, -1, -1],  
        "input_size": [[128, 768], [1], [1]],  
        "output_num": 1, 
        "output_index": [84],  
        "output_size": [[128, 768]], 
        "data_format": ["int8", "int8", "int8", "int8"], 
        "quant_param": [[-1, -1, -1]]
    }

    // layer1, similar as layer0
    // ...
    // layer 2,3,4, ..., 10, 11 
    // ...
]
	

	